{"version":3,"sources":["node_modules/browser-pack/_prelude.js","app.min.js","public/js/angular.app.js","public/js/controllers/ConsoleController.js"],"names":[],"mappings":"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","file":"app.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar _ConsoleController = require('./controllers/ConsoleController');\n\nvar _ConsoleController2 = _interopRequireDefault(_ConsoleController);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//import oAuthKeys from './services/oAuthKeys';\n//import ProductService from './services/ProductService';\n\nvar app = angular.module('liveguardManager', ['ngResource', 'satellizer', 'angular-jwt', 'ui.router']).constant('API', '/manager/api')\n//.config(InterceptorConfig)\n.constant('FACEBOOK_API_KEY', '1204326232924507').controller('consoleController', _ConsoleController2.default).config(function ($stateProvider, $urlRouterProvider) {\n  $stateProvider.state('home', {\n    url: '/',\n    templateUrl: 'views/login.html'\n  }).state('login', {\n    url: '/login',\n    templateUrl: 'views/login.html'\n  }).state('about', {\n    url: '/about',\n    templateUrl: 'views/about.html'\n  }).state('dashboard', {\n    url: '/dashboard',\n    templateUrl: 'views/dashboard.html'\n  });\n}).config(function ($authProvider, $urlRouterProvider, FACEBOOK_API_KEY) {\n  $authProvider.facebook({\n    url: 'api/auth/facebook', // this is the place we are telling Satilette to tell facebook to send back its post request to.\n    clientId: FACEBOOK_API_KEY\n  });\n\n  $urlRouterProvider.otherwise('login');\n\n  $authProvider.loginUrl = 'api/auth/login';\n  $authProvider.signupUrl = 'api/auth/register';\n\n  //.httpInterceptor = function(config) {\n  //   return !!config.url.match(API_URL2);\n  //};\n\n  //$authProvider.tokenPrefix = null;\n});\n\n/*InterceptorConfig.$inject = ['$httpProvider'];\nfunction InterceptorConfig($httpProvider){\n  $httpProvider.interceptors.push('AuthInterceptor');\n}  ;*/\n\n/*Router.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('home', {\n    url: '/', \n    templateUrl: 'views/console.html'\n  })\n  .state('about', {\n    url: '/about', \n    templateUrl: 'views/about.html'\n  });\n  $urlRouterProvider.otherwise('/');\n}*/\n\n},{\"./controllers/ConsoleController\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction ConsoleController($scope, $http, $resource, $auth, $state, $window) {\n  console.log('Main controller Angular');\n\n  $scope.pointingtous = false;\n  $scope.authenticated = false;\n\n  $scope.login = { email: \"\", password: \"\", username: \"\" };\n\n  var socket = window.io();\n\n  console.log(\"controller loaded\");\n\n  $scope.isAuth = function () {\n    $scope.authenticated ? '' : $state.go('login');\n  };\n\n  // sign in with facebook\n  $scope.authenticate = function (provider) {\n    $auth.authenticate(provider);\n  };\n\n  $scope.helloworld = \"hello world from $scope now its not even doing it\";\n\n  $scope.submitLogin = function () {\n    console.log(\"email: \", $scope.login.email, \"password: \", $scope.login.password);\n    $auth.login($scope.login).then(function (response) {\n      console.log(response);\n      $scope.authenticated = true;\n      $state.go('dashboard');\n      $scope.sendSocket($scope.login.username);\n    });\n  };\n\n  $scope.submitRegister = function () {\n    console.log(\"email: \", $scope.login.email, \"password: \", $scope.login.password);\n    $auth.signup($scope.login).then(function (response) {\n      console.log(response);\n      $scope.authenticated = true;\n      $state.go('dashboard');\n      $scope.sendSocket($scope.login.username);\n    });\n  };\n\n  $scope.logout = function () {\n    console.log(\"email: \", $scope.login.email, \"password: \", $scope.login.password);\n    $auth.logout();\n    $scope.authenticated = false;\n    $state.go('login');\n  };\n\n  /// GEO LOCATION STUFF\n\n  function getLocation() {\n    var msg;\n\n    /** \n    first, test for feature support\n    **/\n    if ('geolocation' in window.navigator) {\n      // geolocation is supported :)\n      requestLocation();\n    } else {\n      // no geolocation :(\n      msg = \"Sorry, looks like your browser doesn't support geolocation\";\n      outputResult(msg); // output error message\n      $('.pure-button').removeClass('pure-button-primary').addClass('pure-button-success'); // change button style\n    }\n\n    /*** \n    requestLocation() returns a message, either the users coordinates, or an error message\n    **/\n    function requestLocation() {\n      /**\n      getCurrentPosition() below accepts 3 arguments:\n      a success callback (required), an error callback  (optional), and a set of options (optional)\n      **/\n\n      var options = {\n        // enableHighAccuracy = should the device take extra time or power to return a really accurate result, or should it give you the quick (but less accurate) answer?\n        enableHighAccuracy: false,\n        // timeout = how long does the device have, in milliseconds to return a result?\n        timeout: 5000,\n        // maximumAge = maximum age for a possible previously-cached position. 0 = must return the current position, not a prior cached position\n        maximumAge: 0\n      };\n\n      // call getCurrentPosition()\n      window.navigator.geolocation.getCurrentPosition(success, error, options);\n\n      // upon success, do this\n      function success(pos) {\n        // get longitude and latitude from the position object passed in\n\n        var geocoords = { lng: pos.coords.longitude, lat: pos.coords.latitude };\n\n        // needs to calculate nearest city using GOOGLE. (in order to create rooms/ something like that with sockets)\n        //$http.post('', geocoords, config).then(successCallback, errorCallback);\n        $http({\n          method: 'POST',\n          url: '//maps.googleapis.com/maps/api/place/nearbysearch/json?location=' + pos.coords.longitude + ',' + pos.coords.latitude + '&radius=500&types=bars&key=AIzaSyD_uTMhCR43ITM0CCXrbWDGR8UC68_QDnI'\n        }).then(function successCallback(response) {\n          // this callback will be called asynchronously\n          // when the response is available\n          console.log(\"google places api, data: \", response);\n        }, function errorCallback(response) {\n          // called asynchronously if an error occurs\n          // or server returns response with an error status.\n          console.log(\"google places api - FAILED, data: \", response);\n        });\n\n        // send back their location to the server (via sockets)\n        $scope.sendSocket($scope.login.username, geocoords);\n        // and presto, we have the device's location!\n        msg = 'You appear to be at longitude: ' + geocoords.lng + ' and latitude: ' + geocoords.lat + '<img src=\"http://maps.googleapis.com/maps/api/staticmap?zoom=15&size=300x300&maptype=roadmap&markers=color:red%7Clabel:A%7C' + geocoords.lat + ',' + geocoords.lng + '&sensor=false\">';\n        outputResult(msg); // output message\n        $('.pure-button').removeClass('pure-button-primary').addClass('pure-button-success'); // change button style\n      }\n\n      // upon error, do this\n      function error(err) {\n        // return the error message\n        msg = 'Error: ' + err + ' :(';\n        outputResult(msg); // output button\n        $('.pure-button').removeClass('pure-button-primary').addClass('pure-button-error'); // change button style\n      }\n    } // end requestLocation();\n\n    /*** \n    outputResult() inserts msg into the DOM  \n    **/\n    function outputResult(msg) {\n      $('.result').addClass('result').html(msg);\n    }\n  } // end getLocation()\n\n\n  $scope.getMyLocationbtn = function () {\n    console.log(\"clicked on getmylocation btn\");\n    // show spinner while getlocation() does its thing\n    $('.result').html('<i class=\"fa fa-spinner fa-spin\"></i>');\n    getLocation();\n  };\n\n  // Google Returns local businesses and stuff\n\n\n  // Sockets sends location of user\n  $scope.sendSocket = function (username, geocoords) {\n    socket.emit('message', { message: \"this is a message\", username: username, geocoords: geocoords });\n  };\n\n  // sockets returns the last seen location of other users\n\n  socket.on('message', function (message) {\n    console.log(\"socket - message: \", message);\n  });\n}\nexports.default = ConsoleController;\n\n},{}]},{},[1])\n\n","import ConsoleController from './controllers/ConsoleController';\n//import oAuthKeys from './services/oAuthKeys';\n//import ProductService from './services/ProductService';\n\nvar app = angular.module('liveguardManager', ['ngResource', 'satellizer', 'angular-jwt', 'ui.router'])\n  .constant('API', '/manager/api') \n  //.config(InterceptorConfig)\n  .constant('FACEBOOK_API_KEY','1204326232924507')\n  .controller('consoleController', ConsoleController)\n  .config(function ($stateProvider, $urlRouterProvider) {\n        $stateProvider\n             .state('home', {\n                url: '/',\n                templateUrl: 'views/login.html'\n            })\n             .state('login', {\n                url: '/login',\n                templateUrl: 'views/login.html'\n            })\n             .state('about', {\n                url: '/about',\n                templateUrl: 'views/about.html'\n            })\n             .state('dashboard', {\n                url: '/dashboard',\n                templateUrl: 'views/dashboard.html'\n            });\n  }).config(function ($authProvider,$urlRouterProvider, FACEBOOK_API_KEY){\n      $authProvider\n        .facebook({\n          url: 'api/auth/facebook', // this is the place we are telling Satilette to tell facebook to send back its post request to.\n          clientId: FACEBOOK_API_KEY\n        });\n\n        $urlRouterProvider.otherwise('login');\n\n        $authProvider.loginUrl  = 'api/auth/login';\n        $authProvider.signupUrl = 'api/auth/register';\n\n        //.httpInterceptor = function(config) {\n       //   return !!config.url.match(API_URL2);\n      //};\n\n    //$authProvider.tokenPrefix = null;\n\n});\n\n\n\n\n/*InterceptorConfig.$inject = ['$httpProvider'];\nfunction InterceptorConfig($httpProvider){\n  $httpProvider.interceptors.push('AuthInterceptor');\n}  ;*/\n\n/*Router.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n  .state('home', {\n    url: '/', \n    templateUrl: 'views/console.html'\n  })\n  .state('about', {\n    url: '/about', \n    templateUrl: 'views/about.html'\n  });\n  $urlRouterProvider.otherwise('/');\n}*/","\n  function ConsoleController($scope,$http, $resource, $auth, $state, $window) {\n    console.log('Main controller Angular');\n\n    $scope.pointingtous  = false;\n    $scope.authenticated = false;\n\n    $scope.login = {email: \"\",password: \"\", username: \"\"}\n\n    var socket = window.io();\n\n\n    console.log(\"controller loaded\");\n\n\n   $scope.isAuth = function(){\n      $scope.authenticated ? '' : $state.go('login');\n   }\n\n    // sign in with facebook\n    $scope.authenticate = function(provider) {\n      $auth.authenticate(provider);\n    };\n\n\n    $scope.helloworld = \"hello world from $scope now its not even doing it\";\n\n\n   $scope.submitLogin = function(){\n    console.log(\"email: \", $scope.login.email, \"password: \", $scope.login.password);\n    $auth.login($scope.login).then(function(response){\n      console.log(response);\n      $scope.authenticated = true;\n      $state.go('dashboard')\n      $scope.sendSocket($scope.login.username);\n    })\n   }\n\n  $scope.submitRegister = function(){\n    console.log(\"email: \", $scope.login.email, \"password: \", $scope.login.password);\n    $auth.signup($scope.login).then(function(response){\n       console.log(response);\n       $scope.authenticated = true;\n       $state.go('dashboard')\n       $scope.sendSocket($scope.login.username);\n    })\n  }\n\n  $scope.logout = function(){\n    console.log(\"email: \", $scope.login.email, \"password: \", $scope.login.password);\n    $auth.logout()\n    $scope.authenticated = false;\n    $state.go('login')\n  }\n\n  /// GEO LOCATION STUFF\n\n  function getLocation(){\n  var msg; \n\n  /** \n  first, test for feature support\n  **/\n  if('geolocation' in window.navigator){\n    // geolocation is supported :)\n    requestLocation();\n  }else{\n    // no geolocation :(\n    msg = \"Sorry, looks like your browser doesn't support geolocation\";\n    outputResult(msg); // output error message\n    $('.pure-button').removeClass('pure-button-primary').addClass('pure-button-success'); // change button style\n  }\n\n  /*** \n  requestLocation() returns a message, either the users coordinates, or an error message\n  **/\n  function requestLocation(){\n    /**\n    getCurrentPosition() below accepts 3 arguments:\n    a success callback (required), an error callback  (optional), and a set of options (optional)\n    **/\n  \n    var options = {\n      // enableHighAccuracy = should the device take extra time or power to return a really accurate result, or should it give you the quick (but less accurate) answer?\n      enableHighAccuracy: false,\n      // timeout = how long does the device have, in milliseconds to return a result?\n      timeout: 5000,\n      // maximumAge = maximum age for a possible previously-cached position. 0 = must return the current position, not a prior cached position\n      maximumAge: 0\n    };\n  \n    // call getCurrentPosition()\n     window.navigator.geolocation.getCurrentPosition(success, error, options); \n  \n    // upon success, do this\n    function success(pos){\n      // get longitude and latitude from the position object passed in\n\n      var geocoords = {lng: pos.coords.longitude, lat: pos.coords.latitude}\n\n      // needs to calculate nearest city using GOOGLE. (in order to create rooms/ something like that with sockets)\n      //$http.post('', geocoords, config).then(successCallback, errorCallback);\n      $http({\n      method: 'POST',\n      url: '//maps.googleapis.com/maps/api/place/nearbysearch/json?location='+pos.coords.longitude+','+pos.coords.latitude+'&radius=500&types=bars&key=AIzaSyD_uTMhCR43ITM0CCXrbWDGR8UC68_QDnI'\n      }).then(function successCallback(response) {\n        // this callback will be called asynchronously\n        // when the response is available\n        console.log(\"google places api, data: \", response)\n      }, function errorCallback(response) {\n        // called asynchronously if an error occurs\n        // or server returns response with an error status.\n        console.log(\"google places api - FAILED, data: \", response)\n      });\n\n      // send back their location to the server (via sockets)\n      $scope.sendSocket($scope.login.username, geocoords)\n      // and presto, we have the device's location!\n      msg = 'You appear to be at longitude: ' +  geocoords.lng + ' and latitude: ' +  geocoords.lat  + '<img src=\"http://maps.googleapis.com/maps/api/staticmap?zoom=15&size=300x300&maptype=roadmap&markers=color:red%7Clabel:A%7C' + geocoords.lat + ',' + geocoords.lng+ '&sensor=false\">';\n      outputResult(msg); // output message\n      $('.pure-button').removeClass('pure-button-primary').addClass('pure-button-success'); // change button style\n    }\n  \n    // upon error, do this\n    function error(err){\n      // return the error message\n      msg = 'Error: ' + err + ' :(';\n      outputResult(msg); // output button\n      $('.pure-button').removeClass('pure-button-primary').addClass('pure-button-error'); // change button style\n    }  \n  } // end requestLocation();\n\n  /*** \n  outputResult() inserts msg into the DOM  \n  **/\n  function outputResult(msg){\n    $('.result').addClass('result').html(msg);\n  }\n} // end getLocation()\n\n\n\n$scope.getMyLocationbtn = function(){\n  console.log(\"clicked on getmylocation btn\")\n  // show spinner while getlocation() does its thing\n  $('.result').html('<i class=\"fa fa-spinner fa-spin\"></i>');\n  getLocation();\n};\n\n\n  // Google Returns local businesses and stuff\n\n\n  // Sockets sends location of user\n  $scope.sendSocket = function(username, geocoords){\n    socket.emit('message',{message: \"this is a message\", username: username, geocoords: geocoords });\n  }\n  \n\n\n\n  // sockets returns the last seen location of other users\n  \n  socket.on('message', function(message){\n    console.log(\"socket - message: \", message)\n  });\n\n\n    \n  }\nexport default ConsoleController;\n"]}